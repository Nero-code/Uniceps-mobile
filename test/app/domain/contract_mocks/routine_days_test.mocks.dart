// Mocks generated by Mockito 5.4.4 from annotations
// in uniceps/test/app/domain/commands/routine_days_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:uniceps/app/domain/classes/routine_classes/routine_day.dart'
    as _i6;
import 'package:uniceps/app/domain/contracts/routine_repo/i_routine_days_contract.dart'
    as _i3;
import 'package:uniceps/core/errors/failure.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IRoutineDaysContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockIRoutineDaysContract extends _i1.Mock
    implements _i3.IRoutineDaysContract {
  MockIRoutineDaysContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>> getDaysUnderRoutine(
          int? routineId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDaysUnderRoutine,
          [routineId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RoutineDay>>(
          this,
          Invocation.method(
            #getDaysUnderRoutine,
            [routineId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>> addDay(
          _i6.RoutineDay? day) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDay,
          [day],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RoutineDay>>(
          this,
          Invocation.method(
            #addDay,
            [day],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>> removeDay(
          _i6.RoutineDay? day) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeDay,
          [day],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RoutineDay>>(
          this,
          Invocation.method(
            #removeDay,
            [day],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>> renameDay(
          _i6.RoutineDay? day) =>
      (super.noSuchMethod(
        Invocation.method(
          #renameDay,
          [day],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RoutineDay>>(
          this,
          Invocation.method(
            #renameDay,
            [day],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>> reorderDays(
          List<_i6.RoutineDay>? days) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderDays,
          [days],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RoutineDay>>(
          this,
          Invocation.method(
            #reorderDays,
            [days],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RoutineDay>>>);
}
